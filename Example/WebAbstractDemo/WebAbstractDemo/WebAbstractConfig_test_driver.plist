<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>_config</key>
	<dict>
		<key>defaults</key>
		<dict>
			<key>urlProtocol</key>
			<string>http</string>
			<key>patternsCaseInsensitive</key>
			<false/>
		</dict>
	</dict>
	<key>[[WebAbstractTest]]</key>
	<dict>
		<key>source</key>
		<dict>
			<key>[WebAbstractTest]</key>
			<dict>
				<key>url</key>
				<dict>
					<key>format</key>
					<string>test/%@.html</string>
					<key>variables</key>
					<array>
						<string>relativeUrl</string>
					</array>
				</dict>
			</dict>
		</dict>
		<key>output</key>
		<dict>
			<key>[xPathTest]</key>
			<dict>
				<key>parse</key>
				<dict>
					<key>xPath</key>
					<string>//div[@id=&quot;xpath&quot;]//td[@id=&quot;testTd3&quot;]</string>
				</dict>
			</dict>
			<key>[xPathWithXCapturesTest]</key>
			<dict>
				<key>parse</key>
				<dict>
					<key>xPath</key>
					<string>//div[@id=&quot;xpath&quot;]//td</string>
					<key>xCaptures</key>
					<dict>
						<key>{id}</key>
						<string>@id/.*?(\d+).*?/</string>
						<key>{content}</key>
						<string>text</string>
					</dict>
				</dict>
			</dict>
			<key>[xPathWithPatternTest]</key>
			<dict>
				<key>parse</key>
				<dict>
					<key>xPath</key>
					<string>//div[@id=&quot;pattern&quot;]</string>
					<key>pattern</key>
					<string>The quick brown (\w+) jumps over the lazy (\w+?)s?</string>
				</dict>
			</dict>
			<key>[xPathWithPatternAndCapturesTest]</key>
			<dict>
				<key>parse</key>
				<dict>
					<key>xPath</key>
					<string>//div[@id=&quot;pattern&quot;]</string>
					<key>pattern</key>
					<string>The quick brown (\w+) jumps over the lazy (\w+)s?</string>
					<key>captures</key>
					<dict>
						<key>{subject1}</key>
						<integer>1</integer>
						<key>{subject2}</key>
						<integer>2</integer>
					</dict>
				</dict>
			</dict>
			<key>[patternTest]</key>
			<dict>
				<key>parse</key>
				<dict>
					<key>pattern</key>
					<string>&lt;div id=&quot;pattern&quot; name=&quot;test2&quot;&gt;\s*The quick brown (\w+) jumps over the lazy dog\s*&lt;/div&gt;</string>
				</dict>
			</dict>
			<key>[patternWithCapturesTest]</key>
			<dict>
				<key>parse</key>
				<dict>
					<key>pattern</key>
					<string>&lt;div id=&quot;pattern&quot; name=&quot;test2&quot;&gt;\s*The quick brown (\w+) jumps over the lazy dog\s*&lt;/div&gt;</string>
					<key>captures</key>
					<dict>
						<key>{animal}</key>
						<integer>1</integer>
					</dict>
				</dict>
			</dict>
			<key>[parseTest_with_matchIteration]</key>
			<dict>
				<key>matchWithinRange</key>
				<dict>
					<key>startAtPattern</key>
					<string>&lt;h\d&gt;Test &apos;parse&apos; with &apos;matchIteration&apos;, &apos;matchesAsArray&apos;:&lt;/h\d&gt;</string>
					<key>endAtPattern</key>
					<string>&lt;h\d&gt;End of test&lt;/h\d&gt;</string>
				</dict>
				<key>parse</key>
				<dict>
					<key>pattern</key>
					<string>&lt;li&gt;The quick brown (\w+) jumps over the lazy (\w+)&lt;/li&gt;</string>
					<key>matchIteration</key>
					<integer>2</integer>
					<key>captures</key>
					<dict>
						<key>{animal}</key>
						<integer>1</integer>
						<key>{otherAnimal}</key>
						<integer>2</integer>
					</dict>
				</dict>
			</dict>
			<key>[parseTest_with_matchesAsArray]</key>
			<dict>
				<key>matchWithinRange</key>
				<dict>
					<key>startAtPattern</key>
					<string>&lt;h\d&gt;Test &apos;parse&apos; with &apos;matchIteration&apos;, &apos;matchesAsArray&apos;:&lt;/h\d&gt;</string>
					<key>endAtPattern</key>
					<string>&lt;h\d&gt;End of test&lt;/h\d&gt;</string>
				</dict>
				<key>parse</key>
				<dict>
					<key>pattern</key>
					<string>The quick brown (\w+) jumps over the lazy (\w+)</string>
					<key>matchesAsArray</key>
					<dict>
						<key>all</key>
						<true/>
					</dict>
					<key>captures</key>
					<dict>
						<key>{animal}</key>
						<integer>1</integer>
						<key>{otherAnimal}</key>
						<integer>2</integer>
					</dict>
				</dict>
			</dict>
			<key>[parseTest_with_appendingMatches]</key>
			<dict>
				<key>matchWithinRange</key>
				<dict>
					<key>startAtPattern</key>
					<string>&lt;h\d&gt;Test &apos;parse&apos; with &apos;appendingMatches&apos;, &apos;eachGroup&apos;, &apos;parseCycles&apos;, &apos;parseCyclesUntilSuccess&apos;:&lt;/h\d&gt;</string>
					<key>//endAtPattern</key>
					<string>&lt;h\d&gt;End of test&lt;/h\d&gt;</string>
					<key>endAtPattern</key>
					<string>&lt;/table&gt;</string>
				</dict>
				<key>parse</key>
				<dict>
					<key>pattern</key>
					<string>The (\w+) brown (\w+) jumps over the lazy (\w+)</string>
					<key>appendingMatches</key>
					<dict>
						<key>joinWith</key>
						<string>, </string>
						<key>append</key>
						<dict>
							<key>{animalAdjective}</key>
							<true/>
						</dict>
					</dict>
					<key>captures</key>
					<dict>
						<key>{animalAdjective}</key>
						<integer>1</integer>
						<key>{animal}</key>
						<integer>2</integer>
						<key>{otherAnimal}</key>
						<integer>3</integer>
					</dict>
				</dict>
			</dict>
			<key>[eachGroupTest]</key>
			<dict>
				<key>matchWithinRange</key>
				<dict>
					<key>startAtPattern</key>
					<string>&lt;h\d&gt;Test &apos;parse&apos; with &apos;appendingMatches&apos;, &apos;eachGroup&apos;:&lt;/h\d&gt;.*?&lt;table.*?&gt;</string>
					<key>endAtPattern</key>
					<string>&lt;/table&gt;</string>
					<key>caseInsensitive</key>
					<false/>
				</dict>
				<key>groupByPattern</key>
				<string>&lt;TD&gt;(\d+/\d+/\d+)&lt;/td&gt;</string>
				<key>caseInsensitive</key>
				<true/>
				<key>eachGroup</key>
				<dict>
					<key>parse</key>
					<dict>
						<key>pattern</key>
						<string>The (\w+) brown (\w+) jumps over the lazy (\w+)</string>
						<key>appendingMatches</key>
						<dict>
							<key>joinWith</key>
							<string>, </string>
							<key>append</key>
							<dict>
								<key>{animalAdjective}</key>
								<true/>
							</dict>
						</dict>
						<key>captures</key>
						<dict>
							<key>{animalAdjective}</key>
							<integer>1</integer>
							<key>{animal}</key>
							<integer>2</integer>
							<key>{otherAnimal}</key>
							<integer>3</integer>
						</dict>
					</dict>
				</dict>
			</dict>
			<key>[eachGroupNestedTest]</key>
			<dict>
				<key>matchWithinRange</key>
				<dict>
					<key>startAtPattern</key>
					<string>&lt;h\d&gt;Test &apos;parse&apos; with &apos;appendingMatches&apos;, &apos;eachGroup&apos;, &apos;parseCycles&apos;, &apos;parseCyclesUntilSuccess&apos;:&lt;/h\d&gt;</string>
					<key>endAtPattern</key>
					<string>&lt;h\d&gt;End of test&lt;/h\d&gt;</string>
				</dict>
				<key>groupByPattern</key>
				<string>&lt;h\d&gt;([Cc]lient \d+)&lt;/h\d&gt;</string>
				<key>eachGroup</key>
				<dict>
					<key>//parse</key>
					<dict>
						<key>pattern</key>
						<string>The (\w+) brown (\w+) jumps over the lazy (\w+)</string>
						<key>captures</key>
						<dict>
							<key>{animalAdjective}</key>
							<integer>1</integer>
							<key>{animal}</key>
							<integer>2</integer>
							<key>{otherAnimal}</key>
							<integer>3</integer>
						</dict>
					</dict>
					<key>groupByPattern</key>
					<string>&lt;td&gt;(\d+/\d+/\d+)&lt;/td&gt;</string>
					<key>eachGroup</key>
					<dict>
						<key>parse</key>
						<dict>
							<key>pattern</key>
							<string>The (\w+) brown (\w+) jumps over the lazy (\w+)</string>
							<key>captures</key>
							<dict>
								<key>{animalAdjective}</key>
								<integer>1</integer>
								<key>{animal}</key>
								<integer>2</integer>
								<key>{otherAnimal}</key>
								<integer>3</integer>
							</dict>
						</dict>
					</dict>
				</dict>
			</dict>
			<key>[defaultValuesTest_1]</key>
			<dict>
				<key>matchWithinRange</key>
				<dict>
					<key>startAtPattern</key>
					<string>&lt;h\d&gt;Test &apos;parse&apos; with &apos;defaultValues&apos;, &apos;matchValues&apos;:&lt;/h\d&gt;</string>
					<key>endAtPattern</key>
					<string>&lt;h\d&gt;End of test&lt;/h\d&gt;</string>
				</dict>
				<key>parse</key>
				<dict>
					<key>pattern</key>
					<string>this should not match\!</string>
					<key>defaultValues</key>
					<dict>
						<key>{default_one}</key>
						<string>got default_one value!</string>
					</dict>
					<key>matchValues</key>
					<dict>
						<key>{match_one}</key>
						<string>got match_one value!</string>
					</dict>
				</dict>
			</dict>
			<key>[defaultValuesTest_2]</key>
			<dict>
				<key>matchWithinRange</key>
				<dict>
					<key>startAtPattern</key>
					<string>&lt;h\d&gt;Test &apos;parse&apos; with &apos;defaultValues&apos;, &apos;matchValues&apos;:&lt;/h\d&gt;</string>
					<key>endAtPattern</key>
					<string>&lt;h\d&gt;End of test&lt;/h\d&gt;</string>
				</dict>
				<key>parse</key>
				<dict>
					<key>pattern</key>
					<string>did match\!</string>
					<key>defaultValues</key>
					<dict>
						<key>{default_two}</key>
						<string>got default_two value!</string>
					</dict>
					<key>matchValues</key>
					<dict>
						<key>{match_two}</key>
						<string>got match_two value!</string>
					</dict>
				</dict>
			</dict>
			<key>[parseCyclesTest]</key>
			<dict>
				<key>matchWithinRange</key>
				<dict>
					<key>startAtPattern</key>
					<string>Client 2</string>
					<key>endAtPattern</key>
					<string>&lt;/table&gt;</string>
				</dict>
				<key>parseCycles</key>
				<array>
					<dict>
						<key>pattern</key>
						<string>&lt;td&gt;([\d/]+)&lt;/td&gt;&lt;td&gt;The queer brown fox jumps over the lazy dog</string>
						<key>captures</key>
						<dict>
							<key>{date}</key>
							<integer>1</integer>
						</dict>
					</dict>
					<dict>
						<key>pattern</key>
						<string>&lt;td&gt;([\d/]+)&lt;/td&gt;&lt;td&gt;The quicker brown fox jumps over the lazy dog</string>
						<key>captures</key>
						<dict>
							<key>{date}</key>
							<integer>1</integer>
						</dict>
					</dict>
				</array>
			</dict>
			<key>[parseCyclesUntilSuccessTest]</key>
			<dict>
				<key>matchWithinRange</key>
				<dict>
					<key>startAtPattern</key>
					<string>Client 3</string>
					<key>endAtPattern</key>
					<string>&lt;/table&gt;</string>
				</dict>
				<key>parseCyclesUntilSuccess</key>
				<array>
					<dict>
						<key>pattern</key>
						<string>&gt;([\d/]+)&lt;/td&gt;&lt;td&gt;The quickster brown fox DOES NOT jump over the lazy dog</string>
						<key>captures</key>
						<dict>
							<key>{date}</key>
							<integer>1</integer>
						</dict>
					</dict>
					<dict>
						<key>pattern</key>
						<string>&gt;([\d/]+)&lt;/td&gt;&lt;td&gt;The quickster brown fox jumps over the lazy dog</string>
						<key>captures</key>
						<dict>
							<key>{date}</key>
							<integer>1</integer>
						</dict>
					</dict>
					<dict>
						<key>pattern</key>
						<string>&gt;([\d/]+)&lt;/td&gt;&lt;td&gt;The quickster brown fox USED TO jump over the lazy dog</string>
						<key>captures</key>
						<dict>
							<key>{date}</key>
							<integer>1</integer>
						</dict>
					</dict>
				</array>
			</dict>
			<key>[parseCyclesMergeKeysTest]</key>
			<dict>
				<key>matchWithinRange</key>
				<dict>
					<key>startAtPattern</key>
					<string>&lt;h\d&gt;Test &apos;parseCyclesMergeKeys&apos;:&lt;/h\d&gt;</string>
					<key>startAtPatternInc</key>
					<false/>
					<key>endAtPattern</key>
					<string>&lt;h\d&gt;End of test&lt;/h\d&gt;</string>
					<key>endAtPatternInc</key>
					<false/>
				</dict>
				<key>parseCyclesMergeKeys</key>
				<array>
					<dict>
						<key>pattern</key>
						<string>&lt;dt&gt;Make&lt;/dt&gt;\s*&lt;dd&gt;(.*?)&lt;/dd&gt;</string>
						<key>captures</key>
						<dict>
							<key>{the_make}</key>
							<integer>1</integer>
						</dict>
					</dict>
					<dict>
						<key>pattern</key>
						<string>&lt;dt&gt;Model&lt;/dt&gt;\s*&lt;dd&gt;(.*?)&lt;/dd&gt;</string>
						<key>captures</key>
						<dict>
							<key>{the_model}</key>
							<integer>1</integer>
						</dict>
					</dict>
					<dict>
						<key>pattern</key>
						<string>&lt;dt&gt;Year&lt;/dt&gt;\s*&lt;dd&gt;(.*?)&lt;/dd&gt;</string>
						<key>captures</key>
						<dict>
							<key>{the_year}</key>
							<integer>1</integer>
						</dict>
					</dict>
					<dict>
						<key>pattern</key>
						<string>&lt;dt&gt;Color&lt;/dt&gt;\s*&lt;dd&gt;(.*?)&lt;/dd&gt;</string>
						<key>captures</key>
						<dict>
							<key>{the_color}</key>
							<integer>1</integer>
						</dict>
					</dict>
				</array>
			</dict>
		</dict>
	</dict>
	<key>[[urlTests]]</key>
	<dict>
		<key>source</key>
		<dict>
			<key>[urlTodayTest]</key>
			<dict>
				<key>url</key>
				<dict>
					<key>format</key>
					<string>cgi-bin/date_string_test.cgi?date=%@</string>
					<key>variables</key>
					<array>
						<string>yyyymmdd_date</string>
					</array>
				</dict>
			</dict>
			<key>[urlTomorrowTest]</key>
			<dict>
				<key>url</key>
				<dict>
					<key>format</key>
					<string>cgi-bin/date_string_test.cgi?date=%@</string>
					<key>variables</key>
					<array>
						<dict>
							<key>type</key>
							<string>date</string>
							<key>useDateFromVariable</key>
							<string>input_nsdate</string>
							<key>dateFormat</key>
							<string>%04d%02d%02d</string>
							<key>dayOffset</key>
							<integer>1</integer>
							<key>dateVariables</key>
							<array>
								<string>year</string>
								<string>month</string>
								<string>day</string>
							</array>
						</dict>
					</array>
				</dict>
			</dict>
			<key>[urlYesterdayTest]</key>
			<dict>
				<key>url</key>
				<dict>
					<key>format</key>
					<string>cgi-bin/date_string_test.cgi?date=%@</string>
					<key>variables</key>
					<array>
						<dict>
							<key>type</key>
							<string>date</string>
							<key>useDateFromVariable</key>
							<string>input_nsdate</string>
							<key>dateFormat</key>
							<string>%04d%02d%02d</string>
							<key>dayOffset</key>
							<integer>-1</integer>
							<key>dateVariables</key>
							<array>
								<string>year</string>
								<string>month</string>
								<string>day</string>
							</array>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>output</key>
		<dict>
			<key>[urlTests]</key>
			<dict>
				<key>parse</key>
				<dict>
					<key>pattern</key>
					<string>&lt;li&gt;Date is (\w+).*?&lt;/li&gt;</string>
					<key>caseInsensitive</key>
					<true/>
					<key>captures</key>
					<dict>
						<key>{dayOfWeek}</key>
						<integer>1</integer>
					</dict>
				</dict>
			</dict>
		</dict>
	</dict>
	<key>[[httpPostTest]]</key>
	<dict>
		<key>source</key>
		<dict>
			<key>[httpPostTest]</key>
			<dict>
				<key>url</key>
				<dict>
					<key>httpMethod</key>
					<string>POST</string>
					<key>format</key>
					<string>cgi-bin/reflect_test.cgi</string>
					<key>postVariables</key>
					<dict>
						<key>{valueLiteral}</key>
						<string>&apos;aLiteral&apos;</string>
						<key>{valueDynamic}</key>
						<string>dynamicVar1</string>
					</dict>
				</dict>
			</dict>
		</dict>
		<key>output</key>
		<dict>
			<key>[httpPostTest]</key>
			<dict>
				<key>parse</key>
				<dict>
					<key>xPath</key>
					<string>/html/body/ol/li[2]</string>
					<key>pattern</key>
					<string>=&gt;\s*(\w+)</string>
				</dict>
			</dict>
		</dict>
	</dict>
</dict>
</plist>
